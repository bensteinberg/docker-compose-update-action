name: 'Update docker-compose.yml'
description: 'Update image version in docker-compose.yml, build and push image'

inputs:
  image:
    description: 'Name of image in docker-compose.yml'
    required: true
  docker-file:
    description: 'Path to docker file to build'
    required: true
    default: 'Dockerfile'
  rebuild-if-changed:
    description: 'List of files to hash'
    required: true
  registry:
    description: 'Server address of container registry'
    required: true
    default: "docker.io"
  registry-user:
    description: 'User name for container registry'
    required: true
  registry-pass:
    description: 'Password for container registry'
    required: true
  working-directory:
    description: 'Working directory'
    required: true
    default: "."

outputs:
  image-tag:
    description: "Image and tag"
    value: ${{ steps.get-tag.outputs.tag }}
  updated:
    description: "Whether image needed to be built"
    value: ${{ steps.check-need-build.outputs.need-build }}

runs:
  using: "composite"
  steps:
    - name: Get current image and tag name
      id: get-tag
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        set -x
        python ${{ github.action_path }}/get_tag.py ${{ inputs.image }} ${{ inputs.rebuild-if-changed }}

    - name: Check if we need to rebuild
      id: check-need-build
      shell: bash
      run: |
        set -x
        RETURN_CODE=`docker manifest inspect ${{ steps.get-tag.outputs.tag }} > /dev/null && echo $? || echo $?`
        echo "::set-output name=need-build::$RETURN_CODE"

    - name: Update image tag in git
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        REGISTRY_USER: ${{inputs.registry-user}}
        REGISTRY_PASS: ${{inputs.registry-pass}}
      run: |
        set -x

        # build docker image
        if [ "${{ steps.check-need-build.outputs.need-build }}" = "1" ]; then
          docker build -t ${{ steps.get-tag.outputs.tag }} -f "${{ inputs.docker-file }}" .
        
          if [ "${{ github.event_name }}" = "push" ]; then
            # log into docker
            echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin "${{ inputs.registry }}"
            # push
            docker push ${{ steps.get-tag.outputs.tag }}
            # avoid leaving docker login on disk for tasks that don't have access to secrets
            docker logout "${{ inputs.registry }}"
          fi
        fi

